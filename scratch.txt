"test": "vitest",
       12 +      "test:ui": "vitest --ui",
       13 +      "test:jest": "jest",
       14 +      "test:watch": "vitest --watch",
       15 +      "test:coverage": "vitest --coverage",
       16 +      "test:ci": "vitest --run --coverage"
       17      },
       18      "dependencies": {
       19        "@chakra-ui/react": "^3.26.0",


       es/llm_service.py)
  âŽ¿  Updated backend/src/services/llm_service.py with 65 additions                                                      
       599                self.logger.error(f"LLM API call with file failed: {str(e)}")
       600                raise
       601    
       602 +      async def validate_and_extract_pdf(
       603 +          self,
       604 +          file_path: str,
       605 +          extracted_text: str
       606 +      ) -> Dict[str, Any]:
       607 +          """Validate PDF extraction quality and re-extract if needed
       608 +  
       609 +          Args:
       610 +              file_path: Path to the PDF file
       611 +              extracted_text: Previously extracted text to validate
       612 +  
       613 +          Returns:
       614 +              Dict with validation result and improved extraction if needed
       615 +          """
       616 +          with self.traced_operation(
       617 +              "validate_and_extract_pdf",
       618 +              file_path=file_path
       619 +          ):
       620 +              try:
       621 +                  # Create validation prompt
       622 +                  validation_prompt = f"""You have been provided with a PDF document and its extracted text.
       623 +  
       624 +  Please evaluate the quality of the text extraction and perform the following tasks:
       625 +  
       626 +  1. Check if the extracted text is meaningful and complete (not just "---" or placeholder text)
       627 +  2. If the extraction is poor quality, extract the text properly from the PDF
       628 +  3. Convert the content to clean, well-formatted Markdown
       629 +  
       630 +  Current extracted text preview (first 500 chars):
       631 +  {extracted_text[:500] if extracted_text else "(empty)"}
       632 +  
       633 +  Please respond with:
       634 +  - Quality Assessment: (Good/Poor)
       635 +  - If Poor, provide the properly extracted and formatted Markdown content from the PDF
       636 +  - Ensure all text, tables, and structure are preserved
       637 +  
       638 +  Format the response as clean Markdown suitable for display."""
       639 +  
       640 +                  # Call LLM with PDF attachment
       641 +                  response = await self._call_llm_with_file(
       642 +                      prompt=validation_prompt,
       643 +                      file_path=file_path,
       644 +                      max_tokens=4000  # Allow more tokens for full extraction
       645 +                  )
       646 +  
       647 +                  # Parse response to determine if we need to use the LLM's extraction
       648 +                  is_poor_quality = "poor" in response.lower()[:100] or "---" in extracted_text[:100]
       649 +  
       650 +                  return {
       651 +                      "quality_assessment": "poor" if is_poor_quality else "good",
       652 +                      "needs_reprocessing": is_poor_quality,
       653 +                      "improved_extraction": response if is_poor_quality else extracted_text,
       654 +                      "validation_notes": response[:200] if not is_poor_quality else None
       655 +                  }
       656 +  
       657 +              except Exception as e:
       658 +                  self.logger.error(f"PDF validation failed: {str(e)}")
       659 +                  # Return original text if validation fails
       660 +                  return {
       661 +                      "quality_assessment": "unknown",
       662 +                      "needs_reprocessing": False,
       663 +                      "improved_extraction": extracted_text,
       664 +                      "validation_notes": f"Validation failed: {str(e)}"
       665 +                  }



       ed src/services/queue_service.py with 5 additions and 12 removals                                  
       312                    job.progress = 30
       313                    await self._notify_job_progress(job)
       314    
       315 -                  # Validate and potentially re-extract with LLM if quality is poor
       316 -                  validation_result = await pdf_service.validate_and_extract_pdf(
       317 -                      job.file_path,
       318 -                      markdown_content
       319 -                  )
       315 +                  # Skip LLM validation for now - it's causing processing to hang
       316 +                  # TODO: Re-enable once LLM service is properly configured
       317 +                  formatted_content = markdown_content
       318 +                  raw_text = markdown_content
       319                    job.progress = 50
       320                    await self._notify_job_progress(job)
       321    
       322 -                  if validation_result.get("needs_reprocessing"):
       323 -                      logger.info(f"PDF extraction was poor quality, using LLM-improved version")
       324 -                      formatted_content = validation_result["improved_extraction"]
       325 -                      raw_text = validation_result["improved_extraction"]
       326 -                  else:
       327 -                      formatted_content = markdown_content
       328 -                      raw_text = markdown_content
       322 +                  logger.info(f"PDF processed without LLM validation: {job.document_id}")
       323    
       324                elif job.file_type in [DocumentType.WORD.value, DocumentType.TEXT.value]:
       325                    # For Word and text files, extract text and convert to markdown
